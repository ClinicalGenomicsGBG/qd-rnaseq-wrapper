//Profile config names for nf-core/configs
params {
  config_profile_description = 'Cluster profile for medair (local cluster of Clinical Genomics Gothenburg)'
  config_profile_contact     = 'Clinical Genomics, Gothenburg'
  config_profile_url         = 'https://www.scilifelab.se/units/clinical-genomics-goteborg/'
}

//Nextflow parameters
singularity {
    enabled  = true
    cacheDir = "/apps/bio/dependencies/nf-core/singularities"
}

profiles {

  wgs {
    process {
      queue                  = 'wgs.q'
      executor               = 'sge'
      penv                   = 'mpi'
      process.clusterOptions = '-l excl=1'
      params.max_cpus        = 40
      params.max_time        = 48.h
      params.max_memory      = 128.GB
    }
  }

  production {
    process {
      queue                  = 'production.q'
      executor               = 'sge'
      penv                   = 'mpi'
      process.clusterOptions = '-l excl=1'
      params.max_cpus        = 40
      params.max_time        = 480.h
      params.max_memory      = 128.GB
    }
  }

  qd_rnaseq {
    process {
      cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
      memory = { check_max( 6.GB * task.attempt, 'memory' ) }

      errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'finish' }
      maxRetries    = 2
      maxErrors     = '-1'

      // Process-specific resource requirements
      withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        }
     withLabel:process_medium {
       cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
       memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
       time   = { check_max( 8.h   * task.attempt, 'time'    ) }
       }
     withLabel:process_high {
       cpus   = { check_max( 40    * task.attempt, 'cpus'    ) }
       memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
       time   = { check_max( 20.h  * task.attempt, 'time'    ) }
       }
     withLabel:process_long {
       time   = { check_max( 20.h  * task.attempt, 'time'    ) }
       }
    }
  }

}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}